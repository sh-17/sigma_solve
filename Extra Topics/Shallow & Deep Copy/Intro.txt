EXAMPLE :
x = 4 <-- Constant
y = x
x = x+1

In Python, Assignment statements do not copy objects, they create bindings between a target and an object. sometimes a
user wants copies that user can modify without automatically modifying the original at the same time, in order to do that
we create copies of objects.

A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the
objects found in the original.

Deep copy is a process in which the copying process occurs recursively. It means first constructing a new collection object and then recursively populating it with copies of the child objects found in the original. It means that any changes made to a copy of object do not reflect in the original object. In python, this is implemented using “deepcopy()” function.

---> We need to use shallow copy and deep copy because assignment operators will work for the
     immutable objects , here we took 4 as constant , so  this assignment operator will work for the immutable object
     but when i take mutable object like list,set,dictionary it won't work properly it will behave differently

---> Immutable object is nothing but object which cannot altered and mutuable which can
     be altered, so list set, dict, these all are mutable objects , when we will apply this assignment operator on them
     it will behave differently


Example :
list1 = [1,2,3,4]
list 2 = list 1
list2
# o/p : [1,2,3,4]
list2.append(10)
list2
# o/p : [1,2,3,4,10] if we will print list then also it will shows us same output

--> when I will alter one list it will affect another list also , so that is because when we take
    list 2 append to list 1, so it is showing this output it will contain the reference to the values it won't contain the
    values it will contain the reference... same value changes will affect both the list so it will show you that

--> so it will save the original data and do modification on the copied data here if i do the modification on the copied list
    it will also affect on original list the reason why shallow copy and deep copy are useful