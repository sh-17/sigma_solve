ORM : Which interacts application with datbase

Quersets :-

1. Creating Table in Database using Model

--> class Record(models.Model):

    creation_date = models.DateTimeField(auto_now_add=True)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.CharField(max_length=255)
    phone = models.CharField(max_length=20)
    address = models.CharField(max_length=300)
    city = models.CharField(max_length=255)
    province = models.CharField(max_length=200)
    country = models.CharField(max_length=125)
    def __str__(self):
        return self.first_name + "   " + self.last_name

2. How to get all records from table(Model)

>>> from webapp.models import Record
>>> a = Record.objects.all()
>>> a

3. How to add record to table(Model)

>>> queryset = Record.objects.create(first_name = 'hetvi')
>>> queryset.save()

4. Retrieving Single Objects from QuerySets

>>> queryset = Record.objects.get(first_name = 'hetvi')
>>> queryset

NOTE :  If there is no result then match the query, get() will raise a DoesNotExist exception.
        On the other hand, if there is multiple field matches, it will raise the
        MultipleObjectReturned, which is an attribute of the model class itself.

5. Filtering the Records

>>> queryset = Record.objects.filter(first_name = 'hetvi')
>>> queryset

NOTE : The difference between get() and filter() method is that, the filter() method returns the
       queryset of object(s) where get() method returns single object.

6. Using exclude() Method

>>> queryset = Record.objects.exclude(first_name__startswith = 'h')
>>> queryset

7. How to make OR queries in Django ORM?

>>> queryset = Record.objects.filter(first_name__startswith = 'h')|Record.objects.filter(last_name__startswith = 's')
>>> queryset

8. How to make AND queries in Django ORM?

>>> queryset = Record.objects.filter(first_name__startswith = 'h') & Record.objects.filter(last_name__startswith = 's')
>>> queryset

we can also write like this

>>> queryset2 = User.objects.filter( first_name__startswith='h', last_name__startswith='s' )

OR

>>> queryset3 = User.objects.filter(Q(first_name__startswith='R') & Q(last_name__startswith='D') )

9. Creating Multiple Object in One Shot

---> Sometimes we want create multiple objects in one shot. Suppose we want to create new objects at once and we don't want to run the multiple queries to the database.
     Django ORM provides the bulk_create to create multiple objects in one way.

>>>  Record.objects.all().count()

# --- CREATE MULTIPLE RECORDS --- #

>>> Record.objects.bulk_create([Record(first_name = "Heer", last_name = "Sheth", phone = "88888", email = "sh@gmail.com", address = "65, Flats", city = "Rajkot", province = "West", country = "India")]),Record(first_name = "Honey", last_name = "Modi", phone = "9999", email = "hm@gmail.com", address = "15, Society", city = "Surat", province = "East", country = "India")])

10. Limiting QuerySets

>>> a[:2]
    output : <QuerySet [<Record: Hetvi   Sheth>, <Record: Heer   Sheth>]>

11. How to order a QuerySets in ascending or descending order?

# --- Ascending Order --- #
>>> Record.objects.all().order_by('-phone')

# --- We can also pass the multiple fields in the order_by function --- #
>>> Record.objects.all().order_by('-phone','-first_name')

12. How to order on a field from a related model (with foreign key)?
# --- For using foreign key there should be 2 models --- #

>>> Record.objects.all().order_by('phone', 'first_name')

13. Some Important Field

>>> Record.objects.filter(first_name__startswith = 'hetvi')

--> This is same as the following SQL query

Select * from Record where first_name = "hetvi"

1. exact : It returns the exact result according to the search

# --- Lookup should be used after the __ double underscore. We can use the case-insensitive version called iexact. --- #

>>> Record.objects.get(first_name__iexact = 'hetvi')

2. contains : It is used to case-sensitive test.

>>> Record.objects.get(first_name__icontains = 'hetvi')

---> If we translate the SQL query then it will look like as below.There is also case-incentive version called icontains.

     SELECT ... WHERE first_name LIKE '%hetvi%';

14. How to perform join operations in Django

--> The SQL join combines data or rows from two or more tables based on a common field between them.
    We can perform join operation in many ways.

>>> q = Record.objects.select_related('name of second table')
>>> q
>>> print(q.query)     --> this will us query

15. How to group record in Django ORM?

---> Django ORM provides the grouping facility using the aggregation functions like Max, Min, Avg, and Sum.
     Sometimes we need to get the aggregate values from the objects.

>>> from django.db.models import Avg,Max,Min,Sum,Count
>>> Record.objects.all().aggregate(Avg('id'))
>>> Record.objects.all().aggregate(Min('id'))
>>> Record.objects.all().aggregate(Max('id'))
>>> Record.objects.all().aggregate(Sum('id'))

16. How to perform truncate like operation using Django ORM?

---> Truncate in SQL means clear the table data for future use. Django doesn't provide the built-in methods to truncate \
     the table, but we can use to delete() method to get the similar result.

---> if you want to delete individual object you need to call delete() method on individual instance of that model

>>> Record.objects.all().delete()

17. How to get union of Data

---> Union means getting the record which are common in both query sets.
---> The __gte lookup is used to perform a "greater than or equal to" comparison.
---> The __lte lookup is used to perform a "less than or equal to" comparison.

>>> a1 = Record.objects.filter(id__gte=10)
>>> a2 = Record.objects.filter(id__gte=10)
>>> a1.union(a2)

18. What is difference between null=True and blank=True?

--> In Django, we use null and often blank, by default their values are False. Both of these value work at field level
    where we want to keep a field null or blank. Both values seem similar, but they are different in use.

--> If null = True means the field value is set as NULL i.e. no data. It is basically for the database column value.
